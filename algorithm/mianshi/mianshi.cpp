// mianshi.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>

// 操作系统: 管理计算机的硬件和软件资源、提供用户交互的软件系统
/*
  基本功能：
    1. 统一管理资源： 处理器资源 存储器资源 IO设备资源 文件资源
    2. 实现对计算机资源的抽象：用户无需面向硬件接口编程、IO设备管理软件提供读写接口 文件管理软件提供操作文件接口
    3. 提供了用户与计算机之间的接口：图形窗口形式、命令形式、系统调用形式

  概念：
    1. 并发性：并行【两个或多个事件可以在同一时刻发生】并发【两个或多个事件可以在同一个时间间隔发生】
      单处理器，只存在并发关系
      多处理器，并发+并行
    2. 共享性：操作系统资源可提供多个并发的程序使用：互斥共享、同时访问
    3. 虚拟性：一个物理实体转化成多个逻辑实体 ：时分复用、空分服用
              虚拟磁盘：一个物理磁盘 分为CDE多个逻辑磁盘
              虚拟内存：逻辑上扩大程序的存储容量，使用比实际内存更大的容量

    4. 异步性：多道程序环境， 允许多个进程并发执行，进程在 使用资源时可能需要等待或放弃。进程执行并不是 一气呵成，而是走走停停
                抢占资源，所以进程运行速度不可预知

*/

/*
  进程
  1. 系统资源分配和调度的基本单位
  2. 进程作为程序独立运行的载体 保障程序正常执行
  3. 操作系统资源利用率提升

  进程实体
  
  进程控制块PCB 常驻内存 存放在系统专门开辟的区：
          标识符【唯一标记 PID】、
          状态【运行态、阻塞...】、
          优先级、
          程序计数器【指向下一条指令的地址】、
          内存指针【代码、数据相关的指针】、
          上下文【处理器存储的数据 寄存器 高速缓存啥的】、
          IO【被进程IO所占用的文件列表】、
          记账信息【cpu时间、时钟数总和等】...

  进程&线程
    一个进程可以有多个线程
    线程是操作系统运行调度的最小单位、进程是系统资源分配和调度的基本单位【操作系统对进程的调度实质上是对进程内部线程的调度】
    线程包含在进程之中，是进程中实际运行工作的单位
    一个进程可以并发多个线程，每个线程执行不同的任务
    线程共享进程资源，也有自己独立的资源
    进程系统开销大，线程小
    通信

  进程管理状态模型
    1. 就绪 除了cpu之外其他资源都好了 
    2. 阻塞 由于某些原因 放弃CPU 
    3. 执行 获得cpu 单处理器 只有一个进程处于执行状态

                 就绪

      IO完成        进程调度 时间片用完

    阻塞        IO请求        执行


    4. 创建 分配PCB、插入就绪队列 fork
    5. 终止 系统清理、归还PCB

*/



int main()
{
    std::cout << "Hello World!\n";
}
